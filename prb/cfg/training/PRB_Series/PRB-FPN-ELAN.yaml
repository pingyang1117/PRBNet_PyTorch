# parameters
nc: 80  # number of classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple

# anchors
anchors:
  - [12,16, 19,36, 40,28]  # P3/8
  - [36,75, 76,55, 72,146]  # P4/16
  - [142,110, 192,243, 459,401]  # P5/32

# yolov7 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [32, 3, 1]],  # 0
  
   [-1, 1, Conv, [64, 3, 2]],  # 1-P1/2      
   [-1, 1, Conv, [64, 3, 1]], #2 (P1 backbone)
   
   [-1, 1, Conv, [128, 3, 2]],  # 3-P2/4  
   [-1, 1, Conv, [64, 1, 1]],
   [-2, 1, Conv, [64, 1, 1]],
   [-1, 1, Conv, [64, 3, 1]],
   [-1, 1, Conv, [64, 3, 1]],
   [-1, 1, Conv, [64, 3, 1]],
   [-1, 1, Conv, [64, 3, 1]],
   [[-1, -3, -5, -6], 1, Concat, [1]],
   [-1, 1, Conv, [256, 1, 1]],  # 11 (P2 backbone)
         
   [-1, 1, MP, []],
   [-1, 1, Conv, [128, 1, 1]],
   [-3, 1, Conv, [128, 1, 1]],
   [-1, 1, Conv, [128, 3, 2]],
   [[-1, -3], 1, Concat, [1]],  # 16-P3/8  
   [-1, 1, Conv, [128, 1, 1]],
   [-2, 1, Conv, [128, 1, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [[-1, -3, -5, -6], 1, Concat, [1]],
   [-1, 1, Conv, [512, 1, 1]],  # 24 (P3 backbone)
         
   [-1, 1, MP, []],
   [-1, 1, Conv, [256, 1, 1]],
   [-3, 1, Conv, [256, 1, 1]],
   [-1, 1, Conv, [256, 3, 2]],
   [[-1, -3], 1, Concat, [1]],  # 29-P4/16  
   [-1, 1, Conv, [256, 1, 1]],
   [-2, 1, Conv, [256, 1, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [[-1, -3, -5, -6], 1, Concat, [1]],
   [-1, 1, Conv, [1024, 1, 1]],  # 37 (P4 backbone)
         
   [-1, 1, MP, []],
   [-1, 1, Conv, [512, 1, 1]],
   [-3, 1, Conv, [512, 1, 1]],
   [-1, 1, Conv, [512, 3, 2]],
   [[-1, -3], 1, Concat, [1]],  # 42-P5/32  
   [-1, 1, Conv, [256, 1, 1]],
   [-2, 1, Conv, [256, 1, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [[-1, -3, -5, -6], 1, Concat, [1]],
   [-1, 1, Conv, [1024, 1, 1]],  # 50
  ]

# 2 (P1 backbone)
# 11 (P2 backbone)
# 24 (P3 backbone)
# 37 (P4 backbone)
# 50 (P5 backbone)


# yolov7 head
head:
  [
   # bifusion module 1
   [50, 1, SPPCSPC, [512]],  # 51
   #    RB block1, route backbone P4+P3+P5
   #    output/current/shallow/deep layer depth 512/256/128/256
   #    upsample scale factor 2, mode nearest
   [-1, 1, Conv, [256, 1, 1]], #52
   [[37, 24, -1], 1, RBBlockA, [512, '256,1,1;128,1,2', 2, 'nearest']],  # 53
   [-1, 1, Bottleneck, [512, False]],
   [-1, 2, BottleneckCSPB, [256]],  # 55
   
   #    RB block2, route backbone P3+P2+RB Block1
   #    output/current/shallow/deep layer depth 256/128/64/128
   #    upsample scale factor 2, mode nearest
   [-1, 1, Conv, [128, 1, 1]], # 56
   [[24, 11, -1], 1, RBBlockA, [256, '128,1,1;64,1,2', 2, 'nearest']],  # 57
   [-1, 1, Bottleneck, [256, False]],
   [-1, 2, BottleneckCSPB, [128]],  # 59
   
   #    BFM1
   [[-1,56], 1, BFMBlockB, [256, '128,1,2;128,1,1']], 
   [-1, 1, Bottleneck, [256, False]],
   [-1, 2, BottleneckCSPB, [256]],  # 62

   #    BFM2
   [[-1,52], 1, BFMBlockB, [512, '256,1,2;256,1,1']], 
   [-1, 1, Bottleneck, [512, False]],
   [-1, 2, BottleneckCSPB, [512]],  # 65
   # end of bifusion module 1
   
   
   # bifusion module 2
   [37, 1, SPPCSPC, [256]],  # 66
   #    RBblock1, route backbone P3+P2+P4
   #    output/current/shallow/deep layer depth 512/128/64/128
   #    upsample scale factor 2, mode nearest
   [-1, 1, Conv, [128, 1, 2]], #67
   [[24, 11, -1], 1, RBBlockA, [512, '128,1,2;64,1,4', 2, 'nearest']],  # 68
   [-1, 1, Bottleneck, [512, False]], #69
   [-1, 2, BottleneckCSPB, [256]],  # 70
   
   #    RB block2, route backbone P2+P1+RB Block1
   #    output/current/shallow/deep layer depth 256/64/32/128
   #    upsample scale factor 2, mode nearest
   [-1, 1, Conv, [128, 1, 1]], #71
   [[11, 2, -1], 1, RBBlockA, [256, '64,1,2;32,1,4', 2, 'nearest']],  # 72
   [-1, 1, Bottleneck, [256, False]],
   [-1, 2, BottleneckCSPB, [128]],  # 74

   #    BFM1
   [[-1,71], 1, BFMBlockB, [256, '128,1,2;128,1,1']], 
   [-1, 1, Bottleneck, [256, False]],
   [-1, 2, BottleneckCSPB, [256]],  # 77

   #    BFM2
   [[-1,67], 1, BFMBlockB, [512, '256,1,2;256,1,1']], 
   [-1, 1, Bottleneck, [512, False]],
   [-1, 2, BottleneckCSPB, [512]],  # 80
   # end of bifusion module 2
   
   
   # bifusion module 3
   [24, 1, SPPCSPC, [128]],  # 81
   #    RBblock1, route backbone P2+P1+P3
   #    output/current/shallow/deep layer depth 512/64/32/64
   #    upsample scale factor 2, mode nearest
   [-1, 1, Conv, [64, 1, 4]], #82
   [[11, 2, -1], 1, RBBlockA, [512, '64,1,4;32,1,8', 2, 'nearest']],  # 83
   [-1, 1, Bottleneck, [512, False]], #84
   [-1, 2, BottleneckCSPB, [256]],  # 85
   
   #    RB block2, route backbone P1+P0+RB Block1
   #    output/current/shallow/deep layer depth 256/32/32/128
   #    upsample scale factor 2, mode nearest
   [-1, 1, Conv, [128, 1, 1]], #86
   [[2, 1, -1], 1, RBBlockA, [256, '32,1,4;32,1,4', 2, 'nearest']],  # 87
   [-1, 1, Bottleneck, [256, False]], 
   [-1, 2, BottleneckCSPB, [128]],  # 89

   #    BFM1
   [[-1,86], 1, BFMBlockB, [256, '128,1,2;128,1,1']], 
   [-1, 1, Bottleneck, [256, False]],
   [-1, 2, BottleneckCSPB, [256]],  # 92

   #    BFM2
   [[-1,82], 1, BFMBlockB, [512, '256,1,2;256,1,1']], 
   [-1, 1, Bottleneck, [512, False]],
   [-1, 2, BottleneckCSPB, [512]],  # 95
   # end of bifusion module 3
   
   
   
   [[89, 74, 59], 1, Concat, [1]], # 96 multi-pyramid fusion PY3/8
   [-1, 4, BottleneckCSPB, [128]], # 97 bottleneck = PY + 1
   [-1, 1, Conv, [256, 3, 1]],
   [[92, 77, 62], 1, Concat, [1]],  # 99 multi-pyramid fusion PY4/16
   [-1, 4, BottleneckCSPB, [256]], # 100 bottleneck = PY + 1
   [-1, 1, Conv, [512, 3, 1]],
   [[95, 80, 65], 1, Concat, [1]],  # 102 multi-pyramid fusion PY5/32
   [-1, 4, BottleneckCSPB, [512]], # 103 bottleneck = PY + 1
   [-1, 1, Conv, [1024, 3, 1]],
   
   [98, 1, RepConv, [256, 3, 1]],  # 105
   [101, 1, RepConv, [512, 3, 1]],  # 106
   [104, 1, RepConv, [1024, 3, 1]],  # 107

   [[105, 106, 107], 1, IDetect, [nc, anchors]],   # Detect(P3, P4, P5)
  ]
